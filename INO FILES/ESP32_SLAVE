/*
ESP32 SLAVE - Button Pusher

This code is fused from the example code using the ESPNOW examples from -> Lucas Saavedra Vaz - 2024

Added the following:
-> Move servo-motor whenever it receives a message
-> Reduced to 250 kbps to increase transmission distance
-> Activate internal ESP32 led to indicate when receiving a message

*/

#include <ESP32Servo.h>
#include "ESP32_NOW.h"
#include "WiFi.h"
#include "esp_wifi.h"
#include <esp_mac.h>  // Para las macros MAC2STR y MACSTR

#include <vector>

/* Definiciones */
#define SERVO_PIN 26
#define ESPNOW_WIFI_CHANNEL 6
int ledPin = 2;

Servo miServo;

/* Clases */

// Clase para gestionar los peers en ESP-NOW
class ESP_NOW_Peer_Class : public ESP_NOW_Peer {
public:
  ESP_NOW_Peer_Class(const uint8_t *mac_addr, uint8_t channel, wifi_interface_t iface, const uint8_t *lmk) 
    : ESP_NOW_Peer(mac_addr, channel, iface, lmk) {}

  ~ESP_NOW_Peer_Class() {}

  bool add_peer() {
    if (!add()) {
      log_e("Failed to register the broadcast peer");
      return false; 
    }
    return true;
  }

  void onReceive(const uint8_t *data, size_t len, bool broadcast) {
    Serial.printf("Received a message from master " MACSTR " (%s)\n", MAC2STR(addr()), broadcast ? "broadcast" : "unicast");
    Serial.printf("  Message: %s\n", (char *)data);

    digitalWrite(ledPin, HIGH);
    miServo.write(68);
    delay(600);
    digitalWrite(ledPin, LOW);
    miServo.write(0);
  }
};

/* Variables globales */
std::vector<ESP_NOW_Peer_Class> masters;

/* Callbacks */

void register_new_master(const esp_now_recv_info_t *info, const uint8_t *data, int len, void *arg) {
  if (memcmp(info->des_addr, ESP_NOW.BROADCAST_ADDR, 6) == 0) {
    Serial.printf("Unknown peer " MACSTR " sent a broadcast message\n", MAC2STR(info->src_addr));
    Serial.println("Registering the peer as a master");

    ESP_NOW_Peer_Class new_master(info->src_addr, ESPNOW_WIFI_CHANNEL, WIFI_IF_STA, NULL);
    masters.push_back(new_master);
    
    if (!masters.back().add_peer()) {
      Serial.println("Failed to register the new master");
      return;
    }
  }
}

/* Setup */
void setup() {
  Serial.begin(115200);
  while (!Serial) { delay(10); }

  WiFi.mode(WIFI_STA);
  WiFi.setChannel(ESPNOW_WIFI_CHANNEL);
  WiFi.enableLongRange(true);  // Activar modo de largo alcance
  esp_wifi_set_max_tx_power(78);  // Máxima potencia de transmisión

  while (!WiFi.STA.started()) { delay(100); }

  Serial.println("ESP-NOW Example - Broadcast Slave");
  Serial.println("Wi-Fi parameters:");
  Serial.println("  Mode: STA");
  Serial.println("  MAC Address: " + WiFi.macAddress());
  Serial.printf("  Channel: %d\n", ESPNOW_WIFI_CHANNEL);

  if (!ESP_NOW.begin()) {
    Serial.println("Failed to initialize ESP-NOW");
    delay(5000);
    ESP.restart();
  }

  esp_wifi_config_espnow_rate(WIFI_IF_STA, WIFI_PHY_RATE_LORA_250K);  // Reducir velocidad para mayor alcance
  ESP_NOW.onNewPeer(register_new_master, NULL);

  Serial.println("Setup complete. Waiting for a master to broadcast a message...");

  miServo.attach(SERVO_PIN);
  miServo.write(0);
  pinMode(ledPin, OUTPUT);
}

/* Loop */
void loop() {
  delay(1000);
}
